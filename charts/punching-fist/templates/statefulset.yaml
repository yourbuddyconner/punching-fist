apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ .Release.Name }}-headless
  replicas: {{ .Values.operator.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Values.security.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-database-dir
          image: busybox:latest
          command: 
            - sh
            - -c
            - |
              echo "Creating database directory..."
              mkdir -p /app/data
              echo "Setting permissions..."
              chmod 755 /app/data
              chown 1000:1000 /app/data
              echo "Creating empty database file..."
              touch /app/data/punching-fist.db
              chown 1000:1000 /app/data/punching-fist.db
              chmod 644 /app/data/punching-fist.db
              echo "Directory contents:"
              ls -la /app/data/
              echo "Init complete!"
          volumeMounts:
            - name: database-storage
              mountPath: /app/data
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.server.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.operator.resources | nindent 12 }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.agent.anthropicApiKey }}
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "punching-fist.fullname" . }}-agent
                  key: anthropic-api-key
            {{- end }}
            {{- if .Values.agent.openaiApiKey }}
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "punching-fist.fullname" . }}-agent
                  key: openai-api-key
            {{- end }}
            - name: LLM_PROVIDER
              value: {{ .Values.agent.provider | quote }}
            - name: LLM_MODEL
              value: {{ .Values.agent.model | quote }}
            - name: LLM_TEMPERATURE
              value: {{ .Values.agent.temperature | quote }}
            - name: LLM_MAX_TOKENS
              value: {{ .Values.agent.maxTokens | quote }}
            - name: SQLITE_PATH
              value: "/app/data/punching-fist.db"
            - name: DATABASE_TYPE
              value: "sqlite"
            - name: EXECUTION_MODE
              value: {{ .Values.executionMode | quote }}
          volumeMounts:
            - name: database-storage
              mountPath: /app/data
      volumes:
        - name: database-storage
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: database-storage
        labels:
          app.kubernetes.io/name: {{ .Chart.Name }}
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        accessModes: 
          - ReadWriteOnce
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }} 